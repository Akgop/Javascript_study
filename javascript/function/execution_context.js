/*
실행 컨텍스트(Execution Context)
- 실행중인 함수의 실행 절차에 대한 정보는 실행 컨텍스트에 저장된다.
- 실행 컨텍스트는 함수 실행에 대한 세부 정보를 담고 있는 내부 "데이터 구조"이다.
- 함수 호출 1 회당 정확히 하나의 실행 컨텍스트가 생성된다.
- 중첩 호출이 있는 경우
-- 현재 함수 실행 일시 중지
-- 중지된 함수와 연관된 실행 컨텍스트는 "실행 컨텍스트 스택" 이라는 곳에 저장
-- 중첩 호출이 실행
-- 중첩 호출이 끝나면 실행 컨텍스트 스택에서 pop, 해당 함수의 실행을 이어나감
*/

// 재귀를 통해 pow() 중첩 호출
function pow(x, n) {
    if (n == 1) {
        return x;
    }
    else {
        return x * pow(x, n - 1);
    }
}

console.log(pow(2, 3));

// 1. pow(2, 3)을 호출하는 순간 "실행 컨텍스트"에 x = 2, n = 3이 저장된다.
//    Context: { x: 2, n: 3, 첫 번째 줄}
// 2. if - else 의 두 번째 분기로 이동
//    Context: { x: 2, n: 3, 다섯 번째 줄}
// 3. pow(2, 2)를 호출하기 위해, 현재 실행 컨텍스트를 스택에 저장
//    Context: { x: 2, n: 3, 다섯 번째 줄} | Context: { x: 2, n: 2, 첫 번째 줄}
//    스택에 위와 같이 쌓임
// 4. 위와 같이 수행되어 Context: { x: 2, n: 2, 첫 번째 줄} 가 완료되어 반환되면
//    Context: { x: 2, n: 3, 다섯 번째 줄} 가 스택에서 pop 되어 이어서 실행
// 참고: 정확히는 ~ 줄이 아니라 해당 호출문 직후이다.(일반 재귀와 동일)
