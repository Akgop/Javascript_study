/*
즉시 실행함수 (IIFE)
JS의 가장 큰 문제점 중의 하나는 global scope에 정의된 것은
코드 내의 어디서든지 접근이 가능하다는 것.
하지만 외부에 공유되면 안되거나 공유될 필요가 없는 
속성이나 메소드가 있다.
Or
다른 스크립트 파일 내에서 동일한 이름으로 명명된
변수나 함수가 있을 경우 원치 않는 결과를 가져올 수 있다.
*/

// 익명 함수
var app = function() {
    console.log("호출");
}
app();

// 즉시 실행 함수
// 함수를 괄호로 wrapping한다.
// 변수에 함수를 저장하는 등의 일련의 과정을 거치지 않고
// 즉시 실행된다.
(function() {
    console.log("즉시 호출");
}());

// 변수를 선언하고 즉시실행함수를 할당
var app2 = (function() {
    var privateVar = "private";
    return {
        prop: privateVar
    };
}());

console.log(app2.prop);
// private이 호출된다.
// 즉, 즉시실행함수 내에서 선언한 변수를 외부에서도 접근할 수 있다.
// 변수의 접근 범위가 함수 내부가 아닌 외부에서도 가능하다.
// 즉시 실행함수는 변수의 scope를 포함하는데 사용되며,
// 외부에서 함수 내의 변수에 접근할 경우,
// 이를 통제할 수 있다.
// 즉시 실행함수는 global namespace에 변수를 추가하지 않아도 되서,
// 코드 충돌없이 구현할 수 있어서 플러그인, 라이브러리 만들때 많이 사용된다.

// 매개변수 전달하기
(function(carName) {
    console.log(`내가 구매한 차는 ${carName} 입니다`);
}("sonata"));

// jQuery나 Prototype 라이브러리는 모두 $ global 변수를 사용한다.
// 이 두 라이브러리를 동시에 사용한다면 충돌이 생길 수 있다.
// 하지만 즉시 실행함수에서 사용한다면 위 매개변수를 전달하는 방법으로
// overwritting을 예방할 수 있다.